/**
 *  OpenKM, Open Document Management System (http://www.openkm.com)
 *  Copyright (c) 2006-2010  Paco Avila & Josep Llort
 *
 *  No bytes were intentionally harmed during the development of this application.
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package com.openkm.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;

import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy;
import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ArchiveUtils {
	private static Logger log = LoggerFactory.getLogger(ArchiveUtils.class);
			
	/**
	 * Recursively create ZIP archive from directory 
	 */
	public static void createZip(File path, String root, OutputStream os) throws IOException {
		log.debug("createZip({}, {}, {})", new Object[] { path, root, os });
		
		if (path.exists() && path.canRead()) {
			ZipArchiveOutputStream zos =  new ZipArchiveOutputStream(os);
			zos.setComment("Generated by OpenKM");
			zos.setCreateUnicodeExtraFields(UnicodeExtraFieldPolicy.ALWAYS);
			zos.setUseLanguageEncodingFlag(true);
			zos.setFallbackToUTF8(true);
			zos.setEncoding("UTF-8");
			
			// Prevents java.util.zip.ZipException: ZIP file must have at least one entry
			ZipArchiveEntry ze = new ZipArchiveEntry(root+"/");
			zos.putArchiveEntry(ze);
			zos.closeArchiveEntry();
			
			createZipHelper(path, zos, root);
			
			zos.flush();
			zos.finish();
			zos.close();
		} else {
			throw new IOException("Can't access "+path);
		}
		
		log.debug("createZip: void");
	}
	
	/**
	 * Recursively create ZIP archive from directory helper utility 
	 */
	private static void createZipHelper(File fs, ZipArchiveOutputStream zos, String zePath) throws IOException {
		log.debug("createZipHelper({}, {}, {})", new Object[]{ fs, zos, zePath });
		File[] files = fs.listFiles();
		
		for (int i=0; i<files.length; i++) {
			if (files[i].isDirectory()) {
				log.debug("DIRECTORY {}", files[i]);
				ZipArchiveEntry ze = new ZipArchiveEntry(zePath + "/" + files[i].getName() + "/");
				zos.putArchiveEntry(ze);
				zos.closeArchiveEntry();
				
				createZipHelper(files[i], zos, zePath + "/" + files[i].getName());
			} else {
				log.debug("FILE {}", files[i]);
				ZipArchiveEntry zae = new ZipArchiveEntry(zePath + "/" + files[i].getName());
				zos.putArchiveEntry(zae);
				FileInputStream fis = new FileInputStream(files[i]);
				IOUtils.copy(fis, zos);
				fis.close();
				zos.closeArchiveEntry();
			}
		}
		
		log.debug("createZipHelper: void");
	}
}
