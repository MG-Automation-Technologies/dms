/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExplorerForm.java
 *
 * Created on 07-sep-2010, 10:30:52
 */

package com.openkm.openoffice.ui;

import com.openkm.openoffice.OpenKMAddOn;
import com.openkm.openoffice.bean.FolderNodeBean;
import com.openkm.openoffice.logic.OKMException;
import com.openkm.openoffice.util.ImageUtil;
import com.openkm.openoffice.util.Util;
import com.openkm.ws.client.DatabaseException_Exception;
import com.openkm.ws.client.Folder;
import com.openkm.ws.client.OKMAuth;
import com.openkm.ws.client.OKMAuthService;
import com.openkm.ws.client.OKMFolder;
import com.openkm.ws.client.OKMFolderService;
import com.openkm.ws.client.OKMRepository;
import com.openkm.ws.client.OKMRepositoryService;
import com.openkm.ws.client.RepositoryException_Exception;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.net.URL;
import java.util.Iterator;
import javax.swing.Icon;
import javax.swing.JLabel;
import javax.swing.JTree;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreeSelectionModel;
import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;

/**
 *
 * @author jllort
 */
public class TreeForm extends javax.swing.JFrame {

    private static QName AuthServiceName = new QName("http://endpoint.ws.openkm.com/", "OKMAuthService");
    private static QName RepositoryServiceName = new QName("http://endpoint.ws.openkm.com/", "OKMRepositoryService");
    private static QName FolderServiceName = new QName("http://endpoint.ws.openkm.com/", "OKMFolderService");

    private DefaultTreeModel rootModel;
    private String token = "";
    private OKMAuthService authService = null;
    private OKMRepositoryService repositoryService = null;
    private OKMFolderService folderService = null;
    private OKMAuth okmAuth = null;
    private OKMRepository okmRepository = null;
    private OKMFolder okmFolder = null;
    private DefaultMutableTreeNode actualNode = null;
    private String username = "";
    private String password = "";
    private String host = "";
    private ImageUtil imageUtil;
    private String documentPath = "";

    /** Creates new form ExplorerForm */
    public TreeForm(ImageUtil imageUtil) {
        try {
            this.imageUtil = imageUtil;
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
        } catch (InstantiationException ex) {
        } catch (IllegalAccessException ex) {
        } catch (UnsupportedLookAndFeelException ex) {
        }
        initComponents();
        setLocationByPlatform(true);
        setLocationRelativeTo(getParent());

        // I18N translations
        setTitle(OpenKMAddOn.get().getLang().getString("tree.title"));
        addButton.setText(OpenKMAddOn.get().getLang().getString("button.add"));
        cancelButton.setText(OpenKMAddOn.get().getLang().getString("button.cancel"));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPanel = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        addButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tree explorer");
        setResizable(false);

        tree.setCellRenderer(null);
        scrollPanel.setViewportView(tree);

        addButton.setText("Add");
        addButton.setName("add"); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.setName("cancel"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(addButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(cancelButton)
                .addGap(68, 68, 68))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try {
            disableAllButton();
            OpenKMAddOn.get().create(((FolderNodeBean) actualNode.getUserObject()).getFolder().getPath(), documentPath);
            dispose();
        } catch (OKMException ex) {
            OpenKMAddOn.get().hideWaitWindow();
            new ErrorForm(ex.getMessage());
            evaluateEnabledButtonByPermissions();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables

    public void initServices(String host) throws OKMException {
        try {
            this.host = host;
            authService = new OKMAuthService(new URL(host + "/OKMAuth?wsdl"), AuthServiceName);
            repositoryService = new OKMRepositoryService(new URL(host + "/OKMRepository?wsdl"), RepositoryServiceName);
            folderService = new OKMFolderService(new URL(host + "/OKMFolder?wsdl"), FolderServiceName);
        } catch (Exception ex) {
            throw new OKMException(ex.getMessage());
        }
    }
    
    private void getRootFolder() throws OKMException {
        try {
            Folder folder = okmRepository.getRootFolder(token);
            FolderNodeBean folderNode = new FolderNodeBean();
            folderNode.setFolder(folder);
            folderNode.setIcon(imageUtil.selectImage(folder));
            DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(folderNode);
            rootModel = new DefaultTreeModel(rootNode);
            tree = new JTree(rootModel);
            TreeCellRenderer renderer = new IconCellRenderer();
            tree.setCellRenderer(renderer);
            tree.putClientProperty("JTree.lineStyle", "Angled");
            tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
            tree.setShowsRootHandles(true);
            scrollPanel.setViewportView(tree);
            actualNode = rootNode;
            pack();

        } catch (Exception ex) {
            throw new OKMException(ex.getMessage());
        }
    }

    private void getChilds() throws OKMException {
        try {
        actualNode.removeAllChildren();
        FolderNodeBean folderNode = (FolderNodeBean) actualNode.getUserObject();
            for (Iterator<Folder> it = okmFolder.getChilds(token, folderNode.getFolder().getPath()).getItem().iterator(); it.hasNext();) {
                Folder folder = it.next();
                FolderNodeBean newfolderNode = new FolderNodeBean();
                newfolderNode.setFolder(folder);
                newfolderNode.setIcon(imageUtil.selectImage(folder));
                DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(newfolderNode);
                actualNode.add(childNode);
            }
        } catch (Exception ex) {
            throw new OKMException(ex.getMessage());
        }
    }

    public void startUp(final String username, final String password, String documentPath) throws OKMException {
        this.documentPath = documentPath;
        this.username = username;
        this.password = password;
        okmAuth = authService.getOKMAuthPort();
        okmRepository = repositoryService.getOKMRepositoryPort();
        okmFolder = folderService.getOKMFolderPort();

        BindingProvider bpAuth = (BindingProvider) okmAuth;
        BindingProvider bpRepository = (BindingProvider) okmRepository;
        BindingProvider bpFolder= (BindingProvider) okmFolder;
        
        try {
            bpAuth.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, host+"/OKMAuth");
            bpRepository.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, host+"/OKMRepository");
            bpFolder.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, host+"/OKMFolder");
            enableDefaultButton();
            token = okmAuth.login(username, password);
            getRootFolder();
            getChilds();

            tree.addTreeSelectionListener(new TreeSelectionListener() {
                public void valueChanged(TreeSelectionEvent arg0) {
                    try {
                        DefaultMutableTreeNode node = (DefaultMutableTreeNode)  tree.getLastSelectedPathComponent();
                        if (node == null) return;
                        actualNode = node;

                        token = okmAuth.login(username, password);
                        getChilds();
                        evaluateEnabledButtonByPermissions();

                        // Logout OpenKM
                        okmAuth.logout(token);
                        token = "";
                    } catch (Exception ex) {
                        new ErrorForm(ex.getMessage());
                        if (!token.equals("")) {
                            try {
                                // Logout OpenKM
                                okmAuth.logout(token);
                                token = "";
                            } catch (DatabaseException_Exception ex1) {
                            } catch (RepositoryException_Exception ex1) {
                            }
                        }
                    }
                }
            });

            // Logout OpenKM
            okmAuth.logout(token);
            token = "";
        } catch (Exception ex) {
            if (!token.equals("")) {
                try {
                    // Logout OpenKM
                    okmAuth.logout(token);
                    token = "";
                } catch (DatabaseException_Exception ex1) {
                } catch (RepositoryException_Exception ex1) {
                }
            }
            throw new OKMException(ex.getMessage());
        }
    }

    private void disableAllButton() {
        addButton.setEnabled(false);
        cancelButton.setEnabled(false);
    }

    private void enableDefaultButton() {
        addButton.setEnabled(false);
        cancelButton.setEnabled(true);
    }

    private void evaluateEnabledButtonByPermissions() {
        if (Util.hasWritePermission(((FolderNodeBean) actualNode.getUserObject()).getFolder())) {
            addButton.setEnabled(true);
        } else {
            addButton.setEnabled(false);
        }
        cancelButton.setEnabled(true);
    }

    class IconCellRenderer extends JLabel implements TreeCellRenderer {
        protected Color m_textSelectionColor;
        protected Color m_textNonSelectionColor;
        protected Color m_bkSelectionColor;
        protected Color m_bkNonSelectionColor;
        protected Color m_borderSelectionColor;
        protected boolean m_selected;

        public IconCellRenderer()
        {
            super();
            m_textSelectionColor = UIManager.getColor("Tree.selectionForeground");
            m_textNonSelectionColor = UIManager.getColor("Tree.textForeground");
            m_bkSelectionColor = UIManager.getColor("Tree.selectionBackground");
            m_bkNonSelectionColor = UIManager.getColor("Tree.textBackground");
            m_borderSelectionColor = UIManager.getColor("Tree.selectionBorderColor");
            setOpaque(false);
        }

        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf,
                                                      int row, boolean hasFocus) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode)value;
            Object obj = node.getUserObject();
            setText(obj.toString());

                if (obj instanceof Boolean)
                  setText(OpenKMAddOn.get().getLang().getString("tree.retrieve.data"));

                if (obj instanceof FolderNodeBean)
                {
                    FolderNodeBean idata = (FolderNodeBean) obj;
                    if (expanded) {
                        setIcon(idata.getExpandedIcon());
                    } else {
                        setIcon(idata.getIcon());
                    }
                } else {
                    setIcon(null);
                }

                setFont(tree.getFont());
                setForeground(sel ? m_textSelectionColor :  m_textNonSelectionColor);
                setBackground(sel ? m_bkSelectionColor :  m_bkNonSelectionColor);
                m_selected = sel;
            return this;
        }

        @Override
        public void paintComponent(Graphics g) {
            Color bColor = getBackground();
            Icon icon = getIcon();

            g.setColor(bColor);
            int offset = 0;
            if(icon != null && getText() != null)
              offset = (icon.getIconWidth() + getIconTextGap());
            g.fillRect(offset, 0, getWidth() - 1 - offset,
              getHeight() - 1);

            if (m_selected)
            {
              g.setColor(m_borderSelectionColor);
              g.drawRect(offset, 0, getWidth()-1-offset, getHeight()-1);
            }
            super.paintComponent(g);
        }
    }
}
