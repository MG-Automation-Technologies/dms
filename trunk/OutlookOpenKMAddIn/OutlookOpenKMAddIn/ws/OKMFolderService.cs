//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.1433
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

namespace OutlookOpenKMAddIn.ws
{

    // 
    // Este código fuente fue generado automáticamente por wsdl, Versión=2.0.50727.1432.
    // 


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "OKMFolderBinding", Namespace = "http://endpoint.ws.openkm.git.es/")]
    public partial class OKMFolderService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback createOperationCompleted;

        private System.Threading.SendOrPostCallback deleteOperationCompleted;

        private System.Threading.SendOrPostCallback getChildsOperationCompleted;

        private System.Threading.SendOrPostCallback getPropertiesOperationCompleted;

        private System.Threading.SendOrPostCallback moveOperationCompleted;

        private System.Threading.SendOrPostCallback renameOperationCompleted;

        /// <remarks/>
        public OKMFolderService(String host)
        {
            if (host.EndsWith("/"))
            {
                this.Url = host + "OKMFolder";
            }
            else
            {
                this.Url = host + "/OKMFolder";
            }
        }

        /// <remarks/>
        public event createCompletedEventHandler createCompleted;

        /// <remarks/>
        public event deleteCompletedEventHandler deleteCompleted;

        /// <remarks/>
        public event getChildsCompletedEventHandler getChildsCompleted;

        /// <remarks/>
        public event getPropertiesCompletedEventHandler getPropertiesCompleted;

        /// <remarks/>
        public event moveCompletedEventHandler moveCompleted;

        /// <remarks/>
        public event renameCompletedEventHandler renameCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public folder create(string arg0, folder arg1)
        {
            object[] results = this.Invoke("create", new object[] {
                    arg0,
                    arg1});
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult Begincreate(string arg0, folder arg1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("create", new object[] {
                    arg0,
                    arg1}, callback, asyncState);
        }

        /// <remarks/>
        public folder Endcreate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public void createAsync(string arg0, folder arg1)
        {
            this.createAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void createAsync(string arg0, folder arg1, object userState)
        {
            if ((this.createOperationCompleted == null))
            {
                this.createOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateOperationCompleted);
            }
            this.InvokeAsync("create", new object[] {
                    arg0,
                    arg1}, this.createOperationCompleted, userState);
        }

        private void OncreateOperationCompleted(object arg)
        {
            if ((this.createCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createCompleted(this, new createCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        public void delete(string arg0, string arg1)
        {
            this.Invoke("delete", new object[] {
                    arg0,
                    arg1});
        }

        /// <remarks/>
        public System.IAsyncResult Begindelete(string arg0, string arg1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("delete", new object[] {
                    arg0,
                    arg1}, callback, asyncState);
        }

        /// <remarks/>
        public void Enddelete(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void deleteAsync(string arg0, string arg1)
        {
            this.deleteAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void deleteAsync(string arg0, string arg1, object userState)
        {
            if ((this.deleteOperationCompleted == null))
            {
                this.deleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteOperationCompleted);
            }
            this.InvokeAsync("delete", new object[] {
                    arg0,
                    arg1}, this.deleteOperationCompleted, userState);
        }

        private void OndeleteOperationCompleted(object arg)
        {
            if ((this.deleteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("return")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("value", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public folder[] getChilds(string arg0, string arg1)
        {
            object[] results = this.Invoke("getChilds", new object[] {
                    arg0,
                    arg1});
            return ((folder[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetChilds(string arg0, string arg1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getChilds", new object[] {
                    arg0,
                    arg1}, callback, asyncState);
        }

        /// <remarks/>
        public folder[] EndgetChilds(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((folder[])(results[0]));
        }

        /// <remarks/>
        public void getChildsAsync(string arg0, string arg1)
        {
            this.getChildsAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void getChildsAsync(string arg0, string arg1, object userState)
        {
            if ((this.getChildsOperationCompleted == null))
            {
                this.getChildsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetChildsOperationCompleted);
            }
            this.InvokeAsync("getChilds", new object[] {
                    arg0,
                    arg1}, this.getChildsOperationCompleted, userState);
        }

        private void OngetChildsOperationCompleted(object arg)
        {
            if ((this.getChildsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getChildsCompleted(this, new getChildsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public folder getProperties(string arg0, string arg1)
        {
            object[] results = this.Invoke("getProperties", new object[] {
                    arg0,
                    arg1});
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetProperties(string arg0, string arg1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getProperties", new object[] {
                    arg0,
                    arg1}, callback, asyncState);
        }

        /// <remarks/>
        public folder EndgetProperties(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public void getPropertiesAsync(string arg0, string arg1)
        {
            this.getPropertiesAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void getPropertiesAsync(string arg0, string arg1, object userState)
        {
            if ((this.getPropertiesOperationCompleted == null))
            {
                this.getPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPropertiesOperationCompleted);
            }
            this.InvokeAsync("getProperties", new object[] {
                    arg0,
                    arg1}, this.getPropertiesOperationCompleted, userState);
        }

        private void OngetPropertiesOperationCompleted(object arg)
        {
            if ((this.getPropertiesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPropertiesCompleted(this, new getPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        public void move(string arg0, string arg1, string arg2)
        {
            this.Invoke("move", new object[] {
                    arg0,
                    arg1,
                    arg2});
        }

        /// <remarks/>
        public System.IAsyncResult Beginmove(string arg0, string arg1, string arg2, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("move", new object[] {
                    arg0,
                    arg1,
                    arg2}, callback, asyncState);
        }

        /// <remarks/>
        public void Endmove(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void moveAsync(string arg0, string arg1, string arg2)
        {
            this.moveAsync(arg0, arg1, arg2, null);
        }

        /// <remarks/>
        public void moveAsync(string arg0, string arg1, string arg2, object userState)
        {
            if ((this.moveOperationCompleted == null))
            {
                this.moveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmoveOperationCompleted);
            }
            this.InvokeAsync("move", new object[] {
                    arg0,
                    arg1,
                    arg2}, this.moveOperationCompleted, userState);
        }

        private void OnmoveOperationCompleted(object arg)
        {
            if ((this.moveCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.moveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public folder rename(string arg0, string arg1, string arg2)
        {
            object[] results = this.Invoke("rename", new object[] {
                    arg0,
                    arg1,
                    arg2});
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult Beginrename(string arg0, string arg1, string arg2, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("rename", new object[] {
                    arg0,
                    arg1,
                    arg2}, callback, asyncState);
        }

        /// <remarks/>
        public folder Endrename(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public void renameAsync(string arg0, string arg1, string arg2)
        {
            this.renameAsync(arg0, arg1, arg2, null);
        }

        /// <remarks/>
        public void renameAsync(string arg0, string arg1, string arg2, object userState)
        {
            if ((this.renameOperationCompleted == null))
            {
                this.renameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrenameOperationCompleted);
            }
            this.InvokeAsync("rename", new object[] {
                    arg0,
                    arg1,
                    arg2}, this.renameOperationCompleted, userState);
        }

        private void OnrenameOperationCompleted(object arg)
        {
            if ((this.renameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.renameCompleted(this, new renameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <comentarios/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://endpoint.ws.openkm.git.es/")]
    public partial class folder
    {

        private string authorField;

        private System.DateTime createdField;

        private bool createdFieldSpecified;

        private bool hasChildsField;

        private string pathField;

        private sbyte permissionsField;

        private bool subscribedField;

        private string[] subscriptorsField;

        private string uuidField;

        /// <comentarios/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string author
        {
            get
            {
                return this.authorField;
            }
            set
            {
                this.authorField = value;
            }
        }

        /// <comentarios/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime created
        {
            get
            {
                return this.createdField;
            }
            set
            {
                this.createdField = value;
            }
        }

        /// <comentarios/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool createdSpecified
        {
            get
            {
                return this.createdFieldSpecified;
            }
            set
            {
                this.createdFieldSpecified = value;
            }
        }

        /// <comentarios/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool hasChilds
        {
            get
            {
                return this.hasChildsField;
            }
            set
            {
                this.hasChildsField = value;
            }
        }

        /// <comentarios/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string path
        {
            get
            {
                return this.pathField;
            }
            set
            {
                this.pathField = value;
            }
        }

        /// <comentarios/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public sbyte permissions
        {
            get
            {
                return this.permissionsField;
            }
            set
            {
                this.permissionsField = value;
            }
        }

        /// <comentarios/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool subscribed
        {
            get
            {
                return this.subscribedField;
            }
            set
            {
                this.subscribedField = value;
            }
        }

        /// <comentarios/>
        [System.Xml.Serialization.XmlElementAttribute("subscriptors", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = true)]
        public string[] subscriptors
        {
            get
            {
                return this.subscriptorsField;
            }
            set
            {
                this.subscriptorsField = value;
            }
        }

        /// <comentarios/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string uuid
        {
            get
            {
                return this.uuidField;
            }
            set
            {
                this.uuidField = value;
            }
        }
    }

    /// <remarks/>
    public partial class createCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
    }

    public partial class getChildsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
    }

    public partial class getPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
    }

    public partial class renameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
    }

}