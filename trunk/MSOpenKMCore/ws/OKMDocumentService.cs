//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.1433
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

namespace MSOpenKMCore.ws
{

    // 
    // Este código fuente fue generado automáticamente por wsdl, Versión=2.0.50727.1432.
    // 


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "OKMDocumentBinding", Namespace = "http://endpoint.ws.openkm.git.es/")]
    public partial class OKMDocumentService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback cancelCheckoutOperationCompleted;

        private System.Threading.SendOrPostCallback checkinOperationCompleted;

        private System.Threading.SendOrPostCallback checkoutOperationCompleted;

        private System.Threading.SendOrPostCallback createOperationCompleted;

        private System.Threading.SendOrPostCallback deleteOperationCompleted;

        private System.Threading.SendOrPostCallback getChildsOperationCompleted;

        private System.Threading.SendOrPostCallback getContentOperationCompleted;

        private System.Threading.SendOrPostCallback getContentByVersionOperationCompleted;

        private System.Threading.SendOrPostCallback getPathOperationCompleted;

        private System.Threading.SendOrPostCallback getPropertiesOperationCompleted;

        private System.Threading.SendOrPostCallback getVersionHistoryOperationCompleted;

        private System.Threading.SendOrPostCallback getVersionHistorySizeOperationCompleted;

        private System.Threading.SendOrPostCallback lockOperationCompleted;

        private System.Threading.SendOrPostCallback moveOperationCompleted;

        private System.Threading.SendOrPostCallback purgeOperationCompleted;

        private System.Threading.SendOrPostCallback purgeVersionHistoryOperationCompleted;

        private System.Threading.SendOrPostCallback renameOperationCompleted;

        private System.Threading.SendOrPostCallback restoreVersionOperationCompleted;

        private System.Threading.SendOrPostCallback setContentOperationCompleted;

        private System.Threading.SendOrPostCallback setPropertiesOperationCompleted;

        private System.Threading.SendOrPostCallback unlockOperationCompleted;

        /// <remarks/>
        public OKMDocumentService(String host)
        {
            if (host.EndsWith("/"))
            {
                this.Url = host + "OKMDocument";
            }
            else
            {
                this.Url = host + "/OKMDocument";
            }
        }

        /// <remarks/>
        public event cancelCheckoutCompletedEventHandler cancelCheckoutCompleted;

        /// <remarks/>
        public event checkinCompletedEventHandler checkinCompleted;

        /// <remarks/>
        public event checkoutCompletedEventHandler checkoutCompleted;

        /// <remarks/>
        public event createCompletedEventHandler createCompleted;

        /// <remarks/>
        public event deleteCompletedEventHandler deleteCompleted;

        /// <remarks/>
        public event getChildsCompletedEventHandler getChildsCompleted;

        /// <remarks/>
        public event getContentCompletedEventHandler getContentCompleted;

        /// <remarks/>
        public event getContentByVersionCompletedEventHandler getContentByVersionCompleted;

        /// <remarks/>
        public event getPathCompletedEventHandler getPathCompleted;

        /// <remarks/>
        public event getPropertiesCompletedEventHandler getPropertiesCompleted;

        /// <remarks/>
        public event getVersionHistoryCompletedEventHandler getVersionHistoryCompleted;

        /// <remarks/>
        public event getVersionHistorySizeCompletedEventHandler getVersionHistorySizeCompleted;

        /// <remarks/>
        public event lockCompletedEventHandler lockCompleted;

        /// <remarks/>
        public event moveCompletedEventHandler moveCompleted;

        /// <remarks/>
        public event purgeCompletedEventHandler purgeCompleted;

        /// <remarks/>
        public event purgeVersionHistoryCompletedEventHandler purgeVersionHistoryCompleted;

        /// <remarks/>
        public event renameCompletedEventHandler renameCompleted;

        /// <remarks/>
        public event restoreVersionCompletedEventHandler restoreVersionCompleted;

        /// <remarks/>
        public event setContentCompletedEventHandler setContentCompleted;

        /// <remarks/>
        public event setPropertiesCompletedEventHandler setPropertiesCompleted;

        /// <remarks/>
        public event unlockCompletedEventHandler unlockCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        public void cancelCheckout(string arg0, string arg1)
        {
            this.Invoke("cancelCheckout", new object[] {
                    arg0,
                    arg1});
        }

        /// <remarks/>
        public System.IAsyncResult BegincancelCheckout(string arg0, string arg1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("cancelCheckout", new object[] {
                    arg0,
                    arg1}, callback, asyncState);
        }

        /// <remarks/>
        public void EndcancelCheckout(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void cancelCheckoutAsync(string arg0, string arg1)
        {
            this.cancelCheckoutAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void cancelCheckoutAsync(string arg0, string arg1, object userState)
        {
            if ((this.cancelCheckoutOperationCompleted == null))
            {
                this.cancelCheckoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelCheckoutOperationCompleted);
            }
            this.InvokeAsync("cancelCheckout", new object[] {
                    arg0,
                    arg1}, this.cancelCheckoutOperationCompleted, userState);
        }

        private void OncancelCheckoutOperationCompleted(object arg)
        {
            if ((this.cancelCheckoutCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelCheckoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public version checkin(string arg0, string arg1, string arg2)
        {
            object[] results = this.Invoke("checkin", new object[] {
                    arg0,
                    arg1,
                    arg2});
            return ((version)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult Begincheckin(string arg0, string arg1, string arg2, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("checkin", new object[] {
                    arg0,
                    arg1,
                    arg2}, callback, asyncState);
        }

        /// <remarks/>
        public version Endcheckin(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((version)(results[0]));
        }

        /// <remarks/>
        public void checkinAsync(string arg0, string arg1, string arg2)
        {
            this.checkinAsync(arg0, arg1, arg2, null);
        }

        /// <remarks/>
        public void checkinAsync(string arg0, string arg1, string arg2, object userState)
        {
            if ((this.checkinOperationCompleted == null))
            {
                this.checkinOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckinOperationCompleted);
            }
            this.InvokeAsync("checkin", new object[] {
                    arg0,
                    arg1,
                    arg2}, this.checkinOperationCompleted, userState);
        }

        private void OncheckinOperationCompleted(object arg)
        {
            if ((this.checkinCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkinCompleted(this, new checkinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        public void checkout(string arg0, string arg1)
        {
            this.Invoke("checkout", new object[] {
                    arg0,
                    arg1});
        }

        /// <remarks/>
        public System.IAsyncResult Begincheckout(string arg0, string arg1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("checkout", new object[] {
                    arg0,
                    arg1}, callback, asyncState);
        }

        /// <remarks/>
        public void Endcheckout(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void checkoutAsync(string arg0, string arg1)
        {
            this.checkoutAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void checkoutAsync(string arg0, string arg1, object userState)
        {
            if ((this.checkoutOperationCompleted == null))
            {
                this.checkoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckoutOperationCompleted);
            }
            this.InvokeAsync("checkout", new object[] {
                    arg0,
                    arg1}, this.checkoutOperationCompleted, userState);
        }

        private void OncheckoutOperationCompleted(object arg)
        {
            if ((this.checkoutCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public document create(string arg0, document arg1, [System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")] byte[] arg2)
        {
            object[] results = this.Invoke("create", new object[] {
                    arg0,
                    arg1,
                    arg2});
            return ((document)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult Begincreate(string arg0, document arg1, byte[] arg2, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("create", new object[] {
                    arg0,
                    arg1,
                    arg2}, callback, asyncState);
        }

        /// <remarks/>
        public document Endcreate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((document)(results[0]));
        }

        /// <remarks/>
        public void createAsync(string arg0, document arg1, byte[] arg2)
        {
            this.createAsync(arg0, arg1, arg2, null);
        }

        /// <remarks/>
        public void createAsync(string arg0, document arg1, byte[] arg2, object userState)
        {
            if ((this.createOperationCompleted == null))
            {
                this.createOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateOperationCompleted);
            }
            this.InvokeAsync("create", new object[] {
                    arg0,
                    arg1,
                    arg2}, this.createOperationCompleted, userState);
        }

        private void OncreateOperationCompleted(object arg)
        {
            if ((this.createCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createCompleted(this, new createCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        public void delete(string arg0, string arg1)
        {
            this.Invoke("delete", new object[] {
                    arg0,
                    arg1});
        }

        /// <remarks/>
        public System.IAsyncResult Begindelete(string arg0, string arg1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("delete", new object[] {
                    arg0,
                    arg1}, callback, asyncState);
        }

        /// <remarks/>
        public void Enddelete(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void deleteAsync(string arg0, string arg1)
        {
            this.deleteAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void deleteAsync(string arg0, string arg1, object userState)
        {
            if ((this.deleteOperationCompleted == null))
            {
                this.deleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteOperationCompleted);
            }
            this.InvokeAsync("delete", new object[] {
                    arg0,
                    arg1}, this.deleteOperationCompleted, userState);
        }

        private void OndeleteOperationCompleted(object arg)
        {
            if ((this.deleteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("return")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("value", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public document[] getChilds(string arg0, string arg1)
        {
            object[] results = this.Invoke("getChilds", new object[] {
                    arg0,
                    arg1});
            return ((document[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetChilds(string arg0, string arg1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getChilds", new object[] {
                    arg0,
                    arg1}, callback, asyncState);
        }

        /// <remarks/>
        public document[] EndgetChilds(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((document[])(results[0]));
        }

        /// <remarks/>
        public void getChildsAsync(string arg0, string arg1)
        {
            this.getChildsAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void getChildsAsync(string arg0, string arg1, object userState)
        {
            if ((this.getChildsOperationCompleted == null))
            {
                this.getChildsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetChildsOperationCompleted);
            }
            this.InvokeAsync("getChilds", new object[] {
                    arg0,
                    arg1}, this.getChildsOperationCompleted, userState);
        }

        private void OngetChildsOperationCompleted(object arg)
        {
            if ((this.getChildsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getChildsCompleted(this, new getChildsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType = "base64Binary")]
        public byte[] getContent(string arg0, string arg1, bool arg2)
        {
            object[] results = this.Invoke("getContent", new object[] {
                    arg0,
                    arg1,
                    arg2});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetContent(string arg0, string arg1, bool arg2, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getContent", new object[] {
                    arg0,
                    arg1,
                    arg2}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndgetContent(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void getContentAsync(string arg0, string arg1, bool arg2)
        {
            this.getContentAsync(arg0, arg1, arg2, null);
        }

        /// <remarks/>
        public void getContentAsync(string arg0, string arg1, bool arg2, object userState)
        {
            if ((this.getContentOperationCompleted == null))
            {
                this.getContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetContentOperationCompleted);
            }
            this.InvokeAsync("getContent", new object[] {
                    arg0,
                    arg1,
                    arg2}, this.getContentOperationCompleted, userState);
        }

        private void OngetContentOperationCompleted(object arg)
        {
            if ((this.getContentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getContentCompleted(this, new getContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", DataType = "base64Binary")]
        public byte[] getContentByVersion(string arg0, string arg1, string arg2)
        {
            object[] results = this.Invoke("getContentByVersion", new object[] {
                    arg0,
                    arg1,
                    arg2});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetContentByVersion(string arg0, string arg1, string arg2, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getContentByVersion", new object[] {
                    arg0,
                    arg1,
                    arg2}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndgetContentByVersion(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void getContentByVersionAsync(string arg0, string arg1, string arg2)
        {
            this.getContentByVersionAsync(arg0, arg1, arg2, null);
        }

        /// <remarks/>
        public void getContentByVersionAsync(string arg0, string arg1, string arg2, object userState)
        {
            if ((this.getContentByVersionOperationCompleted == null))
            {
                this.getContentByVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetContentByVersionOperationCompleted);
            }
            this.InvokeAsync("getContentByVersion", new object[] {
                    arg0,
                    arg1,
                    arg2}, this.getContentByVersionOperationCompleted, userState);
        }

        private void OngetContentByVersionOperationCompleted(object arg)
        {
            if ((this.getContentByVersionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getContentByVersionCompleted(this, new getContentByVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string getPath(string arg0, string arg1)
        {
            object[] results = this.Invoke("getPath", new object[] {
                    arg0,
                    arg1});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetPath(string arg0, string arg1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getPath", new object[] {
                    arg0,
                    arg1}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetPath(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getPathAsync(string arg0, string arg1)
        {
            this.getPathAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void getPathAsync(string arg0, string arg1, object userState)
        {
            if ((this.getPathOperationCompleted == null))
            {
                this.getPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPathOperationCompleted);
            }
            this.InvokeAsync("getPath", new object[] {
                    arg0,
                    arg1}, this.getPathOperationCompleted, userState);
        }

        private void OngetPathOperationCompleted(object arg)
        {
            if ((this.getPathCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPathCompleted(this, new getPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public document getProperties(string arg0, string arg1)
        {
            object[] results = this.Invoke("getProperties", new object[] {
                    arg0,
                    arg1});
            return ((document)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetProperties(string arg0, string arg1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getProperties", new object[] {
                    arg0,
                    arg1}, callback, asyncState);
        }

        /// <remarks/>
        public document EndgetProperties(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((document)(results[0]));
        }

        /// <remarks/>
        public void getPropertiesAsync(string arg0, string arg1)
        {
            this.getPropertiesAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void getPropertiesAsync(string arg0, string arg1, object userState)
        {
            if ((this.getPropertiesOperationCompleted == null))
            {
                this.getPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPropertiesOperationCompleted);
            }
            this.InvokeAsync("getProperties", new object[] {
                    arg0,
                    arg1}, this.getPropertiesOperationCompleted, userState);
        }

        private void OngetPropertiesOperationCompleted(object arg)
        {
            if ((this.getPropertiesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPropertiesCompleted(this, new getPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("return")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("value", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public version[] getVersionHistory(string arg0, string arg1)
        {
            object[] results = this.Invoke("getVersionHistory", new object[] {
                    arg0,
                    arg1});
            return ((version[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetVersionHistory(string arg0, string arg1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getVersionHistory", new object[] {
                    arg0,
                    arg1}, callback, asyncState);
        }

        /// <remarks/>
        public version[] EndgetVersionHistory(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((version[])(results[0]));
        }

        /// <remarks/>
        public void getVersionHistoryAsync(string arg0, string arg1)
        {
            this.getVersionHistoryAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void getVersionHistoryAsync(string arg0, string arg1, object userState)
        {
            if ((this.getVersionHistoryOperationCompleted == null))
            {
                this.getVersionHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVersionHistoryOperationCompleted);
            }
            this.InvokeAsync("getVersionHistory", new object[] {
                    arg0,
                    arg1}, this.getVersionHistoryOperationCompleted, userState);
        }

        private void OngetVersionHistoryOperationCompleted(object arg)
        {
            if ((this.getVersionHistoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVersionHistoryCompleted(this, new getVersionHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public long getVersionHistorySize(string arg0, string arg1)
        {
            object[] results = this.Invoke("getVersionHistorySize", new object[] {
                    arg0,
                    arg1});
            return ((long)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetVersionHistorySize(string arg0, string arg1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getVersionHistorySize", new object[] {
                    arg0,
                    arg1}, callback, asyncState);
        }

        /// <remarks/>
        public long EndgetVersionHistorySize(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }

        /// <remarks/>
        public void getVersionHistorySizeAsync(string arg0, string arg1)
        {
            this.getVersionHistorySizeAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void getVersionHistorySizeAsync(string arg0, string arg1, object userState)
        {
            if ((this.getVersionHistorySizeOperationCompleted == null))
            {
                this.getVersionHistorySizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetVersionHistorySizeOperationCompleted);
            }
            this.InvokeAsync("getVersionHistorySize", new object[] {
                    arg0,
                    arg1}, this.getVersionHistorySizeOperationCompleted, userState);
        }

        private void OngetVersionHistorySizeOperationCompleted(object arg)
        {
            if ((this.getVersionHistorySizeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getVersionHistorySizeCompleted(this, new getVersionHistorySizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        public void @lock(string arg0, string arg1)
        {
            this.Invoke("lock", new object[] {
                    arg0,
                    arg1});
        }

        /// <remarks/>
        public System.IAsyncResult Beginlock(string arg0, string arg1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("lock", new object[] {
                    arg0,
                    arg1}, callback, asyncState);
        }

        /// <remarks/>
        public void Endlock(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void lockAsync(string arg0, string arg1)
        {
            this.lockAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void lockAsync(string arg0, string arg1, object userState)
        {
            if ((this.lockOperationCompleted == null))
            {
                this.lockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlockOperationCompleted);
            }
            this.InvokeAsync("lock", new object[] {
                    arg0,
                    arg1}, this.lockOperationCompleted, userState);
        }

        private void OnlockOperationCompleted(object arg)
        {
            if ((this.lockCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.lockCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        public void move(string arg0, string arg1, string arg2)
        {
            this.Invoke("move", new object[] {
                    arg0,
                    arg1,
                    arg2});
        }

        /// <remarks/>
        public System.IAsyncResult Beginmove(string arg0, string arg1, string arg2, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("move", new object[] {
                    arg0,
                    arg1,
                    arg2}, callback, asyncState);
        }

        /// <remarks/>
        public void Endmove(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void moveAsync(string arg0, string arg1, string arg2)
        {
            this.moveAsync(arg0, arg1, arg2, null);
        }

        /// <remarks/>
        public void moveAsync(string arg0, string arg1, string arg2, object userState)
        {
            if ((this.moveOperationCompleted == null))
            {
                this.moveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmoveOperationCompleted);
            }
            this.InvokeAsync("move", new object[] {
                    arg0,
                    arg1,
                    arg2}, this.moveOperationCompleted, userState);
        }

        private void OnmoveOperationCompleted(object arg)
        {
            if ((this.moveCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.moveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        public void purge(string arg0, string arg1)
        {
            this.Invoke("purge", new object[] {
                    arg0,
                    arg1});
        }

        /// <remarks/>
        public System.IAsyncResult Beginpurge(string arg0, string arg1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("purge", new object[] {
                    arg0,
                    arg1}, callback, asyncState);
        }

        /// <remarks/>
        public void Endpurge(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void purgeAsync(string arg0, string arg1)
        {
            this.purgeAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void purgeAsync(string arg0, string arg1, object userState)
        {
            if ((this.purgeOperationCompleted == null))
            {
                this.purgeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpurgeOperationCompleted);
            }
            this.InvokeAsync("purge", new object[] {
                    arg0,
                    arg1}, this.purgeOperationCompleted, userState);
        }

        private void OnpurgeOperationCompleted(object arg)
        {
            if ((this.purgeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.purgeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        public void purgeVersionHistory(string arg0, string arg1)
        {
            this.Invoke("purgeVersionHistory", new object[] {
                    arg0,
                    arg1});
        }

        /// <remarks/>
        public System.IAsyncResult BeginpurgeVersionHistory(string arg0, string arg1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("purgeVersionHistory", new object[] {
                    arg0,
                    arg1}, callback, asyncState);
        }

        /// <remarks/>
        public void EndpurgeVersionHistory(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void purgeVersionHistoryAsync(string arg0, string arg1)
        {
            this.purgeVersionHistoryAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void purgeVersionHistoryAsync(string arg0, string arg1, object userState)
        {
            if ((this.purgeVersionHistoryOperationCompleted == null))
            {
                this.purgeVersionHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpurgeVersionHistoryOperationCompleted);
            }
            this.InvokeAsync("purgeVersionHistory", new object[] {
                    arg0,
                    arg1}, this.purgeVersionHistoryOperationCompleted, userState);
        }

        private void OnpurgeVersionHistoryOperationCompleted(object arg)
        {
            if ((this.purgeVersionHistoryCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.purgeVersionHistoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public document rename(string arg0, string arg1, string arg2)
        {
            object[] results = this.Invoke("rename", new object[] {
                    arg0,
                    arg1,
                    arg2});
            return ((document)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult Beginrename(string arg0, string arg1, string arg2, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("rename", new object[] {
                    arg0,
                    arg1,
                    arg2}, callback, asyncState);
        }

        /// <remarks/>
        public document Endrename(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((document)(results[0]));
        }

        /// <remarks/>
        public void renameAsync(string arg0, string arg1, string arg2)
        {
            this.renameAsync(arg0, arg1, arg2, null);
        }

        /// <remarks/>
        public void renameAsync(string arg0, string arg1, string arg2, object userState)
        {
            if ((this.renameOperationCompleted == null))
            {
                this.renameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrenameOperationCompleted);
            }
            this.InvokeAsync("rename", new object[] {
                    arg0,
                    arg1,
                    arg2}, this.renameOperationCompleted, userState);
        }

        private void OnrenameOperationCompleted(object arg)
        {
            if ((this.renameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.renameCompleted(this, new renameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        public void restoreVersion(string arg0, string arg1, string arg2)
        {
            this.Invoke("restoreVersion", new object[] {
                    arg0,
                    arg1,
                    arg2});
        }

        /// <remarks/>
        public System.IAsyncResult BeginrestoreVersion(string arg0, string arg1, string arg2, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("restoreVersion", new object[] {
                    arg0,
                    arg1,
                    arg2}, callback, asyncState);
        }

        /// <remarks/>
        public void EndrestoreVersion(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void restoreVersionAsync(string arg0, string arg1, string arg2)
        {
            this.restoreVersionAsync(arg0, arg1, arg2, null);
        }

        /// <remarks/>
        public void restoreVersionAsync(string arg0, string arg1, string arg2, object userState)
        {
            if ((this.restoreVersionOperationCompleted == null))
            {
                this.restoreVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrestoreVersionOperationCompleted);
            }
            this.InvokeAsync("restoreVersion", new object[] {
                    arg0,
                    arg1,
                    arg2}, this.restoreVersionOperationCompleted, userState);
        }

        private void OnrestoreVersionOperationCompleted(object arg)
        {
            if ((this.restoreVersionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.restoreVersionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        public void setContent(string arg0, string arg1, [System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")] byte[] arg2)
        {
            this.Invoke("setContent", new object[] {
                    arg0,
                    arg1,
                    arg2});
        }

        /// <remarks/>
        public System.IAsyncResult BeginsetContent(string arg0, string arg1, byte[] arg2, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("setContent", new object[] {
                    arg0,
                    arg1,
                    arg2}, callback, asyncState);
        }

        /// <remarks/>
        public void EndsetContent(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void setContentAsync(string arg0, string arg1, byte[] arg2)
        {
            this.setContentAsync(arg0, arg1, arg2, null);
        }

        /// <remarks/>
        public void setContentAsync(string arg0, string arg1, byte[] arg2, object userState)
        {
            if ((this.setContentOperationCompleted == null))
            {
                this.setContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetContentOperationCompleted);
            }
            this.InvokeAsync("setContent", new object[] {
                    arg0,
                    arg1,
                    arg2}, this.setContentOperationCompleted, userState);
        }

        private void OnsetContentOperationCompleted(object arg)
        {
            if ((this.setContentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setContentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        public void setProperties(string arg0, document arg1)
        {
            this.Invoke("setProperties", new object[] {
                    arg0,
                    arg1});
        }

        /// <remarks/>
        public System.IAsyncResult BeginsetProperties(string arg0, document arg1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("setProperties", new object[] {
                    arg0,
                    arg1}, callback, asyncState);
        }

        /// <remarks/>
        public void EndsetProperties(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void setPropertiesAsync(string arg0, document arg1)
        {
            this.setPropertiesAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void setPropertiesAsync(string arg0, document arg1, object userState)
        {
            if ((this.setPropertiesOperationCompleted == null))
            {
                this.setPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetPropertiesOperationCompleted);
            }
            this.InvokeAsync("setProperties", new object[] {
                    arg0,
                    arg1}, this.setPropertiesOperationCompleted, userState);
        }

        private void OnsetPropertiesOperationCompleted(object arg)
        {
            if ((this.setPropertiesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setPropertiesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.git.es/", ResponseNamespace = "http://endpoint.ws.openkm.git.es/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        public void unlock(string arg0, string arg1)
        {
            this.Invoke("unlock", new object[] {
                    arg0,
                    arg1});
        }

        /// <remarks/>
        public System.IAsyncResult Beginunlock(string arg0, string arg1, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("unlock", new object[] {
                    arg0,
                    arg1}, callback, asyncState);
        }

        /// <remarks/>
        public void Endunlock(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void unlockAsync(string arg0, string arg1)
        {
            this.unlockAsync(arg0, arg1, null);
        }

        /// <remarks/>
        public void unlockAsync(string arg0, string arg1, object userState)
        {
            if ((this.unlockOperationCompleted == null))
            {
                this.unlockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnunlockOperationCompleted);
            }
            this.InvokeAsync("unlock", new object[] {
                    arg0,
                    arg1}, this.unlockOperationCompleted, userState);
        }

        private void OnunlockOperationCompleted(object arg)
        {
            if ((this.unlockCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.unlockCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    public partial class version
    {
    }

    public partial class note
    {
    }

    public partial class @lock
    {
    }

    public partial class document
    {
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void cancelCheckoutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void checkinCompletedEventHandler(object sender, checkinCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal checkinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public version Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((version)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void checkoutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    public partial class createCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
    }

    public partial class getChildsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void getContentCompletedEventHandler(object sender, getContentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void getContentByVersionCompletedEventHandler(object sender, getContentByVersionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getContentByVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getContentByVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void getPathCompletedEventHandler(object sender, getPathCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    public partial class getPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void getVersionHistoryCompletedEventHandler(object sender, getVersionHistoryCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVersionHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getVersionHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public version[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((version[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void getVersionHistorySizeCompletedEventHandler(object sender, getVersionHistorySizeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getVersionHistorySizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getVersionHistorySizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public long Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void lockCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]

    /// <remarks/>
    public delegate void purgeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void purgeVersionHistoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    public partial class renameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void restoreVersionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void setContentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void setPropertiesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void unlockCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

}