//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.3053
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

namespace MSOpenKMCore.ws
{

    // 
    // Este código fuente fue generado automáticamente por wsdl, Versión=2.0.50727.3038.
    // 


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "OKMFolderBinding", Namespace = "http://endpoint.ws.openkm.com/")]
    public partial class OKMFolderService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback createOperationCompleted;

        private System.Threading.SendOrPostCallback createSimpleOperationCompleted;

        private System.Threading.SendOrPostCallback deleteOperationCompleted;

        private System.Threading.SendOrPostCallback getChildsOperationCompleted;

        private System.Threading.SendOrPostCallback getPropertiesOperationCompleted;

        private System.Threading.SendOrPostCallback isValidOperationCompleted;

        private System.Threading.SendOrPostCallback moveOperationCompleted;

        private System.Threading.SendOrPostCallback renameOperationCompleted;

        /// <remarks/>
        public OKMFolderService(String host)
        {
            if (host.EndsWith("/"))
            {
                this.Url = host + "OKMFolder";
            }
            else
            {
                this.Url = host + "/OKMFolder";
            }
        }

        /// <remarks/>
        public event createCompletedEventHandler createCompleted;

        /// <remarks/>
        public event createSimpleCompletedEventHandler createSimpleCompleted;

        /// <remarks/>
        public event deleteCompletedEventHandler deleteCompleted;

        /// <remarks/>
        public event getChildsCompletedEventHandler getChildsCompleted;

        /// <remarks/>
        public event getPropertiesCompletedEventHandler getPropertiesCompleted;

        /// <remarks/>
        public event isValidCompletedEventHandler isValidCompleted;

        /// <remarks/>
        public event moveCompletedEventHandler moveCompleted;

        /// <remarks/>
        public event renameCompletedEventHandler renameCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public folder create(string token, folder fld)
        {
            object[] results = this.Invoke("create", new object[] {
                    token,
                    fld});
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult Begincreate(string token, folder fld, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("create", new object[] {
                    token,
                    fld}, callback, asyncState);
        }

        /// <remarks/>
        public folder Endcreate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public void createAsync(string token, folder fld)
        {
            this.createAsync(token, fld, null);
        }

        /// <remarks/>
        public void createAsync(string token, folder fld, object userState)
        {
            if ((this.createOperationCompleted == null))
            {
                this.createOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateOperationCompleted);
            }
            this.InvokeAsync("create", new object[] {
                    token,
                    fld}, this.createOperationCompleted, userState);
        }

        private void OncreateOperationCompleted(object arg)
        {
            if ((this.createCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createCompleted(this, new createCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public folder createSimple(string token, string fldPath)
        {
            object[] results = this.Invoke("createSimple", new object[] {
                    token,
                    fldPath});
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegincreateSimple(string token, string fldPath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("createSimple", new object[] {
                    token,
                    fldPath}, callback, asyncState);
        }

        /// <remarks/>
        public folder EndcreateSimple(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public void createSimpleAsync(string token, string fldPath)
        {
            this.createSimpleAsync(token, fldPath, null);
        }

        /// <remarks/>
        public void createSimpleAsync(string token, string fldPath, object userState)
        {
            if ((this.createSimpleOperationCompleted == null))
            {
                this.createSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateSimpleOperationCompleted);
            }
            this.InvokeAsync("createSimple", new object[] {
                    token,
                    fldPath}, this.createSimpleOperationCompleted, userState);
        }

        private void OncreateSimpleOperationCompleted(object arg)
        {
            if ((this.createSimpleCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createSimpleCompleted(this, new createSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        public void delete(string token, string fldPath)
        {
            this.Invoke("delete", new object[] {
                    token,
                    fldPath});
        }

        /// <remarks/>
        public System.IAsyncResult Begindelete(string token, string fldPath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("delete", new object[] {
                    token,
                    fldPath}, callback, asyncState);
        }

        /// <remarks/>
        public void Enddelete(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void deleteAsync(string token, string fldPath)
        {
            this.deleteAsync(token, fldPath, null);
        }

        /// <remarks/>
        public void deleteAsync(string token, string fldPath, object userState)
        {
            if ((this.deleteOperationCompleted == null))
            {
                this.deleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteOperationCompleted);
            }
            this.InvokeAsync("delete", new object[] {
                    token,
                    fldPath}, this.deleteOperationCompleted, userState);
        }

        private void OndeleteOperationCompleted(object arg)
        {
            if ((this.deleteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute("return")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public folder[] getChilds(string token, string fldPath)
        {
            object[] results = this.Invoke("getChilds", new object[] {
                    token,
                    fldPath});
            return ((folder[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetChilds(string token, string fldPath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getChilds", new object[] {
                    token,
                    fldPath}, callback, asyncState);
        }

        /// <remarks/>
        public folder[] EndgetChilds(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((folder[])(results[0]));
        }

        /// <remarks/>
        public void getChildsAsync(string token, string fldPath)
        {
            this.getChildsAsync(token, fldPath, null);
        }

        /// <remarks/>
        public void getChildsAsync(string token, string fldPath, object userState)
        {
            if ((this.getChildsOperationCompleted == null))
            {
                this.getChildsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetChildsOperationCompleted);
            }
            this.InvokeAsync("getChilds", new object[] {
                    token,
                    fldPath}, this.getChildsOperationCompleted, userState);
        }

        private void OngetChildsOperationCompleted(object arg)
        {
            if ((this.getChildsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getChildsCompleted(this, new getChildsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public folder getProperties(string token, string fldPath)
        {
            object[] results = this.Invoke("getProperties", new object[] {
                    token,
                    fldPath});
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetProperties(string token, string fldPath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getProperties", new object[] {
                    token,
                    fldPath}, callback, asyncState);
        }

        /// <remarks/>
        public folder EndgetProperties(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public void getPropertiesAsync(string token, string fldPath)
        {
            this.getPropertiesAsync(token, fldPath, null);
        }

        /// <remarks/>
        public void getPropertiesAsync(string token, string fldPath, object userState)
        {
            if ((this.getPropertiesOperationCompleted == null))
            {
                this.getPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPropertiesOperationCompleted);
            }
            this.InvokeAsync("getProperties", new object[] {
                    token,
                    fldPath}, this.getPropertiesOperationCompleted, userState);
        }

        private void OngetPropertiesOperationCompleted(object arg)
        {
            if ((this.getPropertiesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPropertiesCompleted(this, new getPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public bool isValid(string token, string fldPath)
        {
            object[] results = this.Invoke("isValid", new object[] {
                    token,
                    fldPath});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginisValid(string token, string fldPath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("isValid", new object[] {
                    token,
                    fldPath}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndisValid(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void isValidAsync(string token, string fldPath)
        {
            this.isValidAsync(token, fldPath, null);
        }

        /// <remarks/>
        public void isValidAsync(string token, string fldPath, object userState)
        {
            if ((this.isValidOperationCompleted == null))
            {
                this.isValidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisValidOperationCompleted);
            }
            this.InvokeAsync("isValid", new object[] {
                    token,
                    fldPath}, this.isValidOperationCompleted, userState);
        }

        private void OnisValidOperationCompleted(object arg)
        {
            if ((this.isValidCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isValidCompleted(this, new isValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        public void move(string token, string fldPath, string dstPath)
        {
            this.Invoke("move", new object[] {
                    token,
                    fldPath,
                    dstPath});
        }

        /// <remarks/>
        public System.IAsyncResult Beginmove(string token, string fldPath, string dstPath, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("move", new object[] {
                    token,
                    fldPath,
                    dstPath}, callback, asyncState);
        }

        /// <remarks/>
        public void Endmove(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void moveAsync(string token, string fldPath, string dstPath)
        {
            this.moveAsync(token, fldPath, dstPath, null);
        }

        /// <remarks/>
        public void moveAsync(string token, string fldPath, string dstPath, object userState)
        {
            if ((this.moveOperationCompleted == null))
            {
                this.moveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmoveOperationCompleted);
            }
            this.InvokeAsync("move", new object[] {
                    token,
                    fldPath,
                    dstPath}, this.moveOperationCompleted, userState);
        }

        private void OnmoveOperationCompleted(object arg)
        {
            if ((this.moveCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.moveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public folder rename(string token, string fldPath, string newName)
        {
            object[] results = this.Invoke("rename", new object[] {
                    token,
                    fldPath,
                    newName});
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult Beginrename(string token, string fldPath, string newName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("rename", new object[] {
                    token,
                    fldPath,
                    newName}, callback, asyncState);
        }

        /// <remarks/>
        public folder Endrename(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public void renameAsync(string token, string fldPath, string newName)
        {
            this.renameAsync(token, fldPath, newName, null);
        }

        /// <remarks/>
        public void renameAsync(string token, string fldPath, string newName, object userState)
        {
            if ((this.renameOperationCompleted == null))
            {
                this.renameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrenameOperationCompleted);
            }
            this.InvokeAsync("rename", new object[] {
                    token,
                    fldPath,
                    newName}, this.renameOperationCompleted, userState);
        }

        private void OnrenameOperationCompleted(object arg)
        {
            if ((this.renameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.renameCompleted(this, new renameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    public partial class folder
    {
    }

    public partial class createCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
    }

    public partial class createSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
    }

    public partial class getChildsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
    }

    public partial class getPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
    }

    public partial class isValidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
    }

    public partial class renameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
    }
}