//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.3053
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

namespace MSOpenKMCore.ws
{

    // 
    // Este código fuente fue generado automáticamente por wsdl, Versión=2.0.50727.3038.
    // 


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "OKMRepositoryBinding", Namespace = "http://endpoint.ws.openkm.com/")]
    public partial class OKMRepositoryService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback getCategoriesFolderOperationCompleted;

        private System.Threading.SendOrPostCallback getMailFolderOperationCompleted;

        private System.Threading.SendOrPostCallback getPathOperationCompleted;

        private System.Threading.SendOrPostCallback getPersonalFolderOperationCompleted;

        private System.Threading.SendOrPostCallback getRootFolderOperationCompleted;

        private System.Threading.SendOrPostCallback getTemplatesFolderOperationCompleted;

        private System.Threading.SendOrPostCallback getThesaurusFolderOperationCompleted;

        private System.Threading.SendOrPostCallback getTrashFolderOperationCompleted;

        private System.Threading.SendOrPostCallback hasNodeOperationCompleted;

        private System.Threading.SendOrPostCallback purgeTrashOperationCompleted;

        /// <remarks/>
        public OKMRepositoryService(String host)
        {
            if (host.EndsWith("/"))
            {
                this.Url = host + "OKMRepository";
            }
            else
            {
                this.Url = host + "/OKMRepository";
            }
        } 

        /// <remarks/>
        public event getCategoriesFolderCompletedEventHandler getCategoriesFolderCompleted;

        /// <remarks/>
        public event getMailFolderCompletedEventHandler getMailFolderCompleted;

        /// <remarks/>
        public event getPathCompletedEventHandler getPathCompleted;

        /// <remarks/>
        public event getPersonalFolderCompletedEventHandler getPersonalFolderCompleted;

        /// <remarks/>
        public event getRootFolderCompletedEventHandler getRootFolderCompleted;

        /// <remarks/>
        public event getTemplatesFolderCompletedEventHandler getTemplatesFolderCompleted;

        /// <remarks/>
        public event getThesaurusFolderCompletedEventHandler getThesaurusFolderCompleted;

        /// <remarks/>
        public event getTrashFolderCompletedEventHandler getTrashFolderCompleted;

        /// <remarks/>
        public event hasNodeCompletedEventHandler hasNodeCompleted;

        /// <remarks/>
        public event purgeTrashCompletedEventHandler purgeTrashCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public folder getCategoriesFolder(string token)
        {
            object[] results = this.Invoke("getCategoriesFolder", new object[] {
                    token});
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetCategoriesFolder(string token, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getCategoriesFolder", new object[] {
                    token}, callback, asyncState);
        }

        /// <remarks/>
        public folder EndgetCategoriesFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public void getCategoriesFolderAsync(string token)
        {
            this.getCategoriesFolderAsync(token, null);
        }

        /// <remarks/>
        public void getCategoriesFolderAsync(string token, object userState)
        {
            if ((this.getCategoriesFolderOperationCompleted == null))
            {
                this.getCategoriesFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCategoriesFolderOperationCompleted);
            }
            this.InvokeAsync("getCategoriesFolder", new object[] {
                    token}, this.getCategoriesFolderOperationCompleted, userState);
        }

        private void OngetCategoriesFolderOperationCompleted(object arg)
        {
            if ((this.getCategoriesFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCategoriesFolderCompleted(this, new getCategoriesFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public folder getMailFolder(string token)
        {
            object[] results = this.Invoke("getMailFolder", new object[] {
                    token});
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetMailFolder(string token, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getMailFolder", new object[] {
                    token}, callback, asyncState);
        }

        /// <remarks/>
        public folder EndgetMailFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public void getMailFolderAsync(string token)
        {
            this.getMailFolderAsync(token, null);
        }

        /// <remarks/>
        public void getMailFolderAsync(string token, object userState)
        {
            if ((this.getMailFolderOperationCompleted == null))
            {
                this.getMailFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMailFolderOperationCompleted);
            }
            this.InvokeAsync("getMailFolder", new object[] {
                    token}, this.getMailFolderOperationCompleted, userState);
        }

        private void OngetMailFolderOperationCompleted(object arg)
        {
            if ((this.getMailFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMailFolderCompleted(this, new getMailFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public string getPath(string token, string uuid)
        {
            object[] results = this.Invoke("getPath", new object[] {
                    token,
                    uuid});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetPath(string token, string uuid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getPath", new object[] {
                    token,
                    uuid}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetPath(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getPathAsync(string token, string uuid)
        {
            this.getPathAsync(token, uuid, null);
        }

        /// <remarks/>
        public void getPathAsync(string token, string uuid, object userState)
        {
            if ((this.getPathOperationCompleted == null))
            {
                this.getPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPathOperationCompleted);
            }
            this.InvokeAsync("getPath", new object[] {
                    token,
                    uuid}, this.getPathOperationCompleted, userState);
        }

        private void OngetPathOperationCompleted(object arg)
        {
            if ((this.getPathCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPathCompleted(this, new getPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public folder getPersonalFolder(string token)
        {
            object[] results = this.Invoke("getPersonalFolder", new object[] {
                    token});
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetPersonalFolder(string token, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getPersonalFolder", new object[] {
                    token}, callback, asyncState);
        }

        /// <remarks/>
        public folder EndgetPersonalFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public void getPersonalFolderAsync(string token)
        {
            this.getPersonalFolderAsync(token, null);
        }

        /// <remarks/>
        public void getPersonalFolderAsync(string token, object userState)
        {
            if ((this.getPersonalFolderOperationCompleted == null))
            {
                this.getPersonalFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPersonalFolderOperationCompleted);
            }
            this.InvokeAsync("getPersonalFolder", new object[] {
                    token}, this.getPersonalFolderOperationCompleted, userState);
        }

        private void OngetPersonalFolderOperationCompleted(object arg)
        {
            if ((this.getPersonalFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPersonalFolderCompleted(this, new getPersonalFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public folder getRootFolder(string token)
        {
            object[] results = this.Invoke("getRootFolder", new object[] {
                    token});
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetRootFolder(string token, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getRootFolder", new object[] {
                    token}, callback, asyncState);
        }

        /// <remarks/>
        public folder EndgetRootFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public void getRootFolderAsync(string token)
        {
            this.getRootFolderAsync(token, null);
        }

        /// <remarks/>
        public void getRootFolderAsync(string token, object userState)
        {
            if ((this.getRootFolderOperationCompleted == null))
            {
                this.getRootFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRootFolderOperationCompleted);
            }
            this.InvokeAsync("getRootFolder", new object[] {
                    token}, this.getRootFolderOperationCompleted, userState);
        }

        private void OngetRootFolderOperationCompleted(object arg)
        {
            if ((this.getRootFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRootFolderCompleted(this, new getRootFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public folder getTemplatesFolder(string token)
        {
            object[] results = this.Invoke("getTemplatesFolder", new object[] {
                    token});
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetTemplatesFolder(string token, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getTemplatesFolder", new object[] {
                    token}, callback, asyncState);
        }

        /// <remarks/>
        public folder EndgetTemplatesFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public void getTemplatesFolderAsync(string token)
        {
            this.getTemplatesFolderAsync(token, null);
        }

        /// <remarks/>
        public void getTemplatesFolderAsync(string token, object userState)
        {
            if ((this.getTemplatesFolderOperationCompleted == null))
            {
                this.getTemplatesFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTemplatesFolderOperationCompleted);
            }
            this.InvokeAsync("getTemplatesFolder", new object[] {
                    token}, this.getTemplatesFolderOperationCompleted, userState);
        }

        private void OngetTemplatesFolderOperationCompleted(object arg)
        {
            if ((this.getTemplatesFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTemplatesFolderCompleted(this, new getTemplatesFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public folder getThesaurusFolder(string token)
        {
            object[] results = this.Invoke("getThesaurusFolder", new object[] {
                    token});
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetThesaurusFolder(string token, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getThesaurusFolder", new object[] {
                    token}, callback, asyncState);
        }

        /// <remarks/>
        public folder EndgetThesaurusFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public void getThesaurusFolderAsync(string token)
        {
            this.getThesaurusFolderAsync(token, null);
        }

        /// <remarks/>
        public void getThesaurusFolderAsync(string token, object userState)
        {
            if ((this.getThesaurusFolderOperationCompleted == null))
            {
                this.getThesaurusFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetThesaurusFolderOperationCompleted);
            }
            this.InvokeAsync("getThesaurusFolder", new object[] {
                    token}, this.getThesaurusFolderOperationCompleted, userState);
        }

        private void OngetThesaurusFolderOperationCompleted(object arg)
        {
            if ((this.getThesaurusFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getThesaurusFolderCompleted(this, new getThesaurusFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public folder getTrashFolder(string token)
        {
            object[] results = this.Invoke("getTrashFolder", new object[] {
                    token});
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetTrashFolder(string token, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getTrashFolder", new object[] {
                    token}, callback, asyncState);
        }

        /// <remarks/>
        public folder EndgetTrashFolder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((folder)(results[0]));
        }

        /// <remarks/>
        public void getTrashFolderAsync(string token)
        {
            this.getTrashFolderAsync(token, null);
        }

        /// <remarks/>
        public void getTrashFolderAsync(string token, object userState)
        {
            if ((this.getTrashFolderOperationCompleted == null))
            {
                this.getTrashFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTrashFolderOperationCompleted);
            }
            this.InvokeAsync("getTrashFolder", new object[] {
                    token}, this.getTrashFolderOperationCompleted, userState);
        }

        private void OngetTrashFolderOperationCompleted(object arg)
        {
            if ((this.getTrashFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTrashFolderCompleted(this, new getTrashFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return")]
        public bool hasNode(string token, string path)
        {
            object[] results = this.Invoke("hasNode", new object[] {
                    token,
                    path});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginhasNode(string token, string path, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("hasNode", new object[] {
                    token,
                    path}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndhasNode(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void hasNodeAsync(string token, string path)
        {
            this.hasNodeAsync(token, path, null);
        }

        /// <remarks/>
        public void hasNodeAsync(string token, string path, object userState)
        {
            if ((this.hasNodeOperationCompleted == null))
            {
                this.hasNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnhasNodeOperationCompleted);
            }
            this.InvokeAsync("hasNode", new object[] {
                    token,
                    path}, this.hasNodeOperationCompleted, userState);
        }

        private void OnhasNodeOperationCompleted(object arg)
        {
            if ((this.hasNodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.hasNodeCompleted(this, new hasNodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace = "http://endpoint.ws.openkm.com/", ResponseNamespace = "http://endpoint.ws.openkm.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal)]
        public void purgeTrash(string token)
        {
            this.Invoke("purgeTrash", new object[] {
                    token});
        }

        /// <remarks/>
        public System.IAsyncResult BeginpurgeTrash(string token, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("purgeTrash", new object[] {
                    token}, callback, asyncState);
        }

        /// <remarks/>
        public void EndpurgeTrash(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void purgeTrashAsync(string token)
        {
            this.purgeTrashAsync(token, null);
        }

        /// <remarks/>
        public void purgeTrashAsync(string token, object userState)
        {
            if ((this.purgeTrashOperationCompleted == null))
            {
                this.purgeTrashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpurgeTrashOperationCompleted);
            }
            this.InvokeAsync("purgeTrash", new object[] {
                    token}, this.purgeTrashOperationCompleted, userState);
        }

        private void OnpurgeTrashOperationCompleted(object arg)
        {
            if ((this.purgeTrashCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.purgeTrashCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <comentarios/>
    public partial class folder
    {
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getCategoriesFolderCompletedEventHandler(object sender, getCategoriesFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCategoriesFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getCategoriesFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public folder Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((folder)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getMailFolderCompletedEventHandler(object sender, getMailFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMailFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getMailFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public folder Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((folder)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getPathCompletedEventHandler(object sender, getPathCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getPersonalFolderCompletedEventHandler(object sender, getPersonalFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPersonalFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;
    
        internal getPersonalFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public folder Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((folder)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getRootFolderCompletedEventHandler(object sender, getRootFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRootFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getRootFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public folder Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((folder)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getTemplatesFolderCompletedEventHandler(object sender, getTemplatesFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTemplatesFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getTemplatesFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public folder Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((folder)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getThesaurusFolderCompletedEventHandler(object sender, getThesaurusFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getThesaurusFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getThesaurusFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public folder Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((folder)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getTrashFolderCompletedEventHandler(object sender, getTrashFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTrashFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getTrashFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public folder Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((folder)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void hasNodeCompletedEventHandler(object sender, hasNodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class hasNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal hasNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void purgeTrashCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

}